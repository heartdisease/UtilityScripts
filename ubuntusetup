#!/bin/bash
function installBasics() {
	echo "[UBUNTU SETUP] Install basic command line utilities..."
	sudo apt install -y net-tools wget curl software-properties-common apt-transport-https hashalot rng-tools fortune-mod fortunes rar p7zip-full optipng pdftk pwgen
}

function installMisc() {
	echo "[UBUNTU SETUP] Installing various different useful tools that are not available by default..."
	sudo apt install -y ubuntu-restricted-extras fish inkscape gimp gthumb totem filezilla pidgin pidgin-otr vlc thunderbird thunderbird-gnome-support transmission-gtk keepass2 nautilus-gtkhash gparted usb-creator-gtk

	if ! command -v cowsay &>/dev/null
	then
		echo "[UBUNTU SETUP] Installing gimmicks..."
		sudo apt install -y cowsay fortune-mod fortunes

		echo >> ~/.bashrc
		echo "fortune | cowsay" >> ~/.bashrc
		echo "echo \"=========================================\"" >> ~/.bashrc
		echo "echo" >> ~/.bashrc
	fi
}

function installFirewall() {
	echo "Installing firewall (UFW)..."
	sudo apt install -y ufw
	sudo ufw enable
}

function installGoogleChrome() {
	if ! command -v google-chrome &>/dev/null
	then
		dl_url="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
		dl_file="$HOME/Downloads/$(echo $dl_url | sed -E 's/^.*\/([^\/]+)$/\1/')"

		if ! [ -f $dl_file ]
		then
			wget -O $dl_file $dl_url
		fi

		sudo apt install -y $dl_file
	fi
}

function installWine() {
	if ! command -v winecfg &>/dev/null
	then
		# enable multiarch (allows to install both 64 and 32-bit packages on the same machine)
		sudo dpkg --add-architecture i386

		# import the WineHQ repositoryâ€™s GPG key
		wget -qO- https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
		sudo apt-add-repository -y "deb http://dl.winehq.org/wine-builds/ubuntu/ $(lsb_release -sc) main"

		sudo apt update
		sudo apt install -y --install-recommends winehq-stable

		echo "Confirm installation of all required Wine packages:"

		winecfg &>/dev/null &
		echo "Press enter to continue..."
		read
	fi
}

function installLutris() {
	if ! command -v lutris &>/dev/null
	then
		sudo add-apt-repository -y ppa:lutris-team/lutris
		sudo apt update
		sudo apt install lutris
	fi
}

function installVeracrypt() {
	if ! command -v veracrypt &>/dev/null
	then
		sudo add-apt-repository ppa:unit193/encryption --yes
		sudo apt update
		sudo apt install -y veracrypt
	fi
}

function installJava() {
	if ! command -v java &>/dev/null
	then
		echo "Installing JDK..."
		sudo apt install openjdk-8-jdk openjdk-8-source

		# Adds the JAVA_HOME environment variable
		echo 'JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"' | sudo tee -a /etc/environment

		# Loads the environment description
		source /etc/environment
	fi
}

function installNodeJs() {
	if ! command -v nvm &>/dev/null
	then
		echo "Installing Node Version Manager..."
		wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
		nvm install --lts
		nvm use --lts
	fi
}

function installVsCode() {
	if ! command -v code &>/dev/null
	then
		wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
		sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"

		sudo apt update
		sudo apt install -y code
	fi
}

function installIntelliJ() {
	sudo apt install -y snapd
	sudo snap install intellij-idea-community --classic

	# increase the max_user_watches config option
	echo "fs.inotify.max_user_watches=524288" | sudo tee /etc/sysctl.d/20-inotify-watches.conf
	# increase the max files config option
	echo "fs.file-max=2097152" | sudo tee /etc/sysctl.d/20-max-files.conf
	# apply changes
	sudo sysctl -p --system
}

function installGit() {
	if ! command -v git &>/dev/null
	then
		echo "[UBUNTU SETUP] Installing Git..."
		sudo apt install -y git bash-completion

		echo "Creating .gitconfig for user $USER..."
		git config --global user.name "Christoph Matscheko"
		git config --global user.email "christoph.matscheko@gmx.net"
		git config --global pull.rebase true
		# enable Git credential storage
		git config --global credential.helper store

		git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1
		echo >> ~/.bashrc
		echo "# activate bash-git-prompt" >> ~/.bashrc
		echo "if [ -f \"\$HOME/.bash-git-prompt/gitprompt.sh\" ]; then" >> ~/.bashrc
		echo "  GIT_PROMPT_ONLY_IN_REPO=1 # Use the default prompt when not in a git repo." >> ~/.bashrc
		echo "  GIT_PROMPT_FETCH_REMOTE_STATUS=0 # Avoid fetching remote status" >> ~/.bashrc
		echo "  GIT_PROMPT_SHOW_UPSTREAM=0 # Don't display upstream tracking branch" >> ~/.bashrc
		echo "  GIT_SHOW_UNTRACKED_FILES=no # Don't count untracked files (no, normal, all)" >> ~/.bashrc
		echo "  source \$HOME/.bash-git-prompt/gitprompt.sh" >> ~/.bashrc
		echo "fi" >> ~/.bashrc
	fi
}

function installDevTools() {
	echo "[UBUNTU SETUP] Installing essential dev-tools..."

	installGit
	installJava
	installVsCode
	installIntelliJ
	sudo apt install -y build-essential
}

function installWebP() {
	echo "[UBUNTU SETUP] Installing webp utilities..."

	installGit
	sudo apt install -y webp python3-pip meson ninja-build cmake libgdk-pixbuf2.0-dev libwebp-dev

	local curr_dir=$PWD
	cd ~/Downloads
	if ! [ -d "webp-pixbuf-loader/.git" ]
	then
		git clone https://github.com/aruiz/webp-pixbuf-loader.git
	fi
	cd webp-pixbuf-loader
	meson builddir -Dgdk_pixbuf_query_loaders_path=/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders
	ninja -C builddir
	sudo ninja -C builddir install
	cd $curr_dir

	python3 -m pip install --user --upgrade Pillow
	python3 -m pip install --user --upgrade apng

	cp webp2gif ~/.local/bin
	chmod +x ~/.local/bin/webp2gif

	cp webp2png ~/.local/bin
	chmod +x ~/.local/bin/webp2png
}

function installSignal() {
  if ! command -v signal-desktop &>/dev/null
  then
    # 1. Install our official public software signing key
    wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
    sudo mv signal-desktop-keyring.gpg /usr/share/keyrings/

    # 2. Add our repository to your list of repositories
    echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
    sudo tee -a /etc/apt/sources.list.d/signal-xenial.list

    # 3. Update your package database and install signal
    sudo apt update
    sudo apt install -y signal-desktop
  fi
}

function installGnomeShell() {
	echo "[UBUNTU SETUP] Installing gnome-shell and related utilities..."
	sudo apt install -y gnome-shell gnome-session gnome-tweak-tool menulibre
}

function installLaptopModeTools() {
	echo "[UBUNTU SETUP] Installing laptop mode tools..."
	sudo apt install -y tlp tlp-rdw
	# start with: sudo tlp start
}

function installLatex() {
	echo "[UBUNTU SETUP] Installing LaTeX distribution 'texlive'..."
	sudo apt install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra texlive-extra-utils
}

function installAnthy() {
	echo "[UBUNTU SETUP] Installing Anthy for Japanese language input..."
	sudo apt install -y anthy ibus-anthy language-pack-ja language-pack-ja-base language-pack-gnome-ja-base language-pack-gnome-ja kanjipad
}

function configureGnomeSettings() {
	echo "[UBUNTU SETUP] Adjust GNOME user settings for Gedit and Nautilus ..."
	gsettings set org.gnome.nautilus.preferences default-sort-order 'type'
	gsettings set org.gnome.nautilus.preferences executable-text-activation 'ask'

	gsettings set org.gnome.gedit.preferences.editor display-line-numbers true
	gsettings set org.gnome.gedit.preferences.editor highlight-current-line true
	gsettings set org.gnome.gedit.preferences.editor bracket-matching true
	gsettings set org.gnome.gedit.preferences.editor scheme 'oblivion'
	gsettings set org.gnome.gedit.preferences.editor auto-indent true
	gsettings set org.gnome.gedit.preferences.editor insert-spaces true
	gsettings set org.gnome.gedit.preferences.editor tabs-size 'uint32 2'

	echo "[UBUNTU SETUP] Disabling GNOME default shortcuts that interfere with IntelliJ and VSCode..."
	gsettings set org.gnome.desktop.wm.keybindings toggle-shaded "[]"
	gsettings set org.gnome.desktop.wm.keybindings begin-move "[]"
	gsettings set org.gnome.desktop.wm.keybindings panel-main-menu "[]"

	gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-right "[]"
	gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-left "[]"
	gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-down "['<Super><Shift>Page_Down']"
	gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-up "['<Super><Shift>Page_Up']"

	echo "[UBUNTU SETUP] Set mouse acceleration profile to 'flat' to avoid drag and drop issues..."
	gsettings set org.gnome.desktop.peripherals.mouse accel-profile 'flat'
	gsettings set org.gnome.desktop.peripherals.mouse speed 'double 1.0'
}

## MAIN ##

echo "[UBUNTU SETUP] Starting Ubuntu setup..."

if [ "$(lsb_release -si)" != "Ubuntu" ]
then
	echo "[UBUNTU SETUP] Your operating system is not supported! Abort."
	exit 1
fi

if [ "$USERNAME" == "root" ]
then
	echo "[UBUNTU SETUP] Please do not execute this script as root! Abort."
	exit 1
fi

configureGnomeSettings

sudo apt update

installBasics
installMisc
installWebP
installFirewall
installGnomeShell

installMisc
installSignal
installWine
installLutris
installDevTools
installGoogleChrome

#installLaptopModeTools
#installLatex
#installAnthy

sudo apt update
sudo apt upgrade -y
sudo apt autoremove -y

echo "[UBUNTU SETUP] Ubuntu setup is done."
exit 0
